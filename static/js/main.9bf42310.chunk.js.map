{"version":3,"sources":["components/Navbar/Navbar.js","components/Wrapper/Wrapper.js","components/TravelCard/TravelCard.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","this","props","score","topScore","textCss","Component","Wrapper","children","TravelCard","onClick","event","buttonChoice","name","index","src","image","alt","App","state","css","text","picked","travels","Travels","choice","parseInt","target","getAttribute","console","log","_this","indexOf","setState","concat","Object","toConsumableArray","shuffle","swal","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","_this2","components_Navbar_Navbar","components_Wrapper_Wrapper","map","travel","components_TravelCard_TravelCard","key","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bf42310.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Navbar.css\";\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"topnav\">\n                    <div className=\"active\" >React Traveler!</div>\n                    <div className=\"score\">Score={this.props.score} &nbsp; Top Score={this.props.topScore}</div>\n                    <div className=\"className\">{this.props.textCss}</div>\n                    \n                </div>\n            </div>\n        );\n    };\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => \n    <div className=\"wrapper\">\n        {props.children}\n    </div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./TravelCard.css\";\n    \n    const TravelCard = props => (\n        <div onClick={(event)=> props.buttonChoice(event)} className=\"card-wrapper\">\n            <div className=\"card\">\n                <div className=\"img-container\">\n                    <h3>{props.name}</h3>\n                    <img index={props.index} src={props.image} alt={props.name}/>\n                </div>\n            </div>\n            <div className=\"content\">\n                <ul>\n                    <p>\n                        <strong>Name: </strong> {props.name}\n                    </p>\n                </ul>\n            </div>\n        </div>\n    );\n\nexport default TravelCard;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport swal from 'sweetalert';\n// components\nimport Navbar from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport TravelCard from \"./components/TravelCard\";\nimport Travels from \"./travels.json\";\nimport './App.css';\n\nclass App extends Component {\n\n  //setting this.state.friends to the travels json array\n  state = {\n    css: \"start\",\n    text: \"Click a button to start\",\n    score: 0,\n    topScore: 0,\n    picked: [],\n    travels: Travels\n  };\n\n  buttonChoice = (event) => {\n    const choice = parseInt(event.target.getAttribute('index'));\n    console.log(choice);\n    if (this.state.picked.indexOf(choice) >= 0) {\n      console.log(\"wrong\");\n      // If you pick incorrectly\n      this.setState({ \n        score: 0 , \n        picked: [], \n        css: \"incorrectGuess\" , \n        text: \"Duplicate! Try again.\" \n      });\n    } else {\n      console.log(\"correct\");\n      // If you pick correctly\n      this.setState({ \n        picked: [...this.state.picked, choice],\n        score: this.state.score + 1 , \n        css: \"correctGuess\", \n        text: \"Good pick!\"\n      });\n    }\n    \n    // Check if you're currently tied for high score\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score + 1});\n    };\n    this.shuffle(this.state.travels);\n\n    if (this.state.score === 11) {\n      swal('You traveled the world!', '');\n    }\n  };\n\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  render() {\n    // console.log(this.state)\n    return (\n      <div className=\"App\" >\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\n        <Wrapper >\n          <h1 className=\"title\">Test your memorization. Travel the world :)</h1>\n          {this.state.travels.map(travel => (\n            <TravelCard \n              key={travel.id}\n              name={travel.name}\n              image={travel.image}\n              buttonChoice={this.buttonChoice}\n              index={travel.id}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}